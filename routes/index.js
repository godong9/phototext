'use strict';

var Flickr = require("flickrapi"),
  flickrOptions = {
    api_key: "a23df2cecbb14fe222320a3fd75edc32",  //Your Flickr API Key
    secret: "c154a767d336bc4b"  //Your Flickr Secret Key
  };

//Alphabet Character (A to Z => 0 to 25)
var ch = [];

ch[0] =
  [
    [0,0,0,1,0,0,0],
    [0,0,1,1,1,0,0],
    [0,1,1,0,1,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0]
  ];

ch[1] =
  [
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,1,1,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,1,1,1,1,0]
  ];

ch[2] =
  [
    [0,0,1,1,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,1,0],
    [0,0,1,1,1,0,0]
  ];

ch[3] =
  [
    [0,1,1,1,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,1,1,1,0,0]
  ];

ch[4] =
  [
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,1,1,1,1,0]
  ];

ch[5] =
  [
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0]
  ];

ch[6] =
  [
    [0,0,1,1,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,1,1,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,0,1,1,1,0,0]
  ];

ch[7] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0]
  ];

ch[8] =
  [
    [0,1,1,1,1,1,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,1,1,1,1,1,0]
  ];

ch[9] =
  [
    [0,1,1,1,1,1,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,1,0,1,0,0,0],
    [0,0,1,0,0,0,0]
  ];

ch[10] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,1,0,0],
    [0,1,0,1,0,0,0],
    [0,1,1,0,0,0,0],
    [0,1,1,0,0,0,0],
    [0,1,0,1,0,0,0],
    [0,1,0,0,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0]
  ];

ch[11] =
  [
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,1,1,1,1,0]
  ];

ch[12] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,1,1,0],
    [0,1,1,0,1,1,0],
    [0,1,1,0,1,1,0],
    [0,1,0,1,0,1,0],
    [0,1,0,1,0,1,0],
    [0,1,0,1,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0]
  ];

ch[13] =
  [
    [0,1,0,0,0,1,0],
    [0,1,1,0,0,1,0],
    [0,1,1,0,0,1,0],
    [0,1,1,1,0,1,0],
    [0,1,0,1,0,1,0],
    [0,1,0,1,0,1,0],
    [0,1,0,1,1,1,0],
    [0,1,0,0,1,1,0],
    [0,1,0,0,1,1,0],
    [0,1,0,0,0,1,0]
  ];

ch[14] =
  [
    [0,0,1,1,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,0,1,1,1,0,0]
  ];

ch[15] =
  [
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,1,1,1,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0]
  ];

ch[16] =
  [
    [0,0,1,1,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,1,0,1,0],
    [0,0,1,1,1,0,0],
    [0,0,0,0,0,1,0]
  ];

ch[17] =
  [
    [0,1,1,1,1,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,1,1,1,0,0],
    [0,1,0,0,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0]
  ];

ch[18] =
  [
    [0,0,1,1,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,0,1,0,0,0,0],
    [0,0,0,1,1,0,0],
    [0,0,0,0,0,1,0],
    [0,0,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,0,1,1,1,0,0]
  ];

ch[19] =
  [
    [0,1,1,1,1,1,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0]
  ];

ch[20] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,0,1,1,1,0,0]
  ];

ch[21] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,0,1,0,1,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0]
  ];

ch[22] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,1,0,1,0],
    [0,1,0,1,0,1,0],
    [0,0,1,0,1,0,0],
    [0,0,1,0,1,0,0]
  ];

ch[23] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,0,1,0,1,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,1,0,1,0,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0]
  ];

ch[24] =
  [
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,1,0,0,0,1,0],
    [0,0,1,0,1,0,0],
    [0,0,1,0,1,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0]
  ];

ch[25] =
  [
    [0,1,1,1,1,1,0],
    [0,0,0,0,0,1,0],
    [0,0,0,0,0,1,0],
    [0,0,0,0,1,0,0],
    [0,0,0,1,0,0,0],
    [0,0,0,1,0,0,0],
    [0,0,1,0,0,0,0],
    [0,0,1,0,0,0,0],
    [0,1,0,0,0,0,0],
    [0,1,1,1,1,1,0]
  ];

//Null Character
ch[26] =
  [
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0]
  ];


var textArray = [];
var word = 'flower';
var size = 6;
var picNum = 180;

//처음 캔버스 화면에 뿌려주는 함수
exports.index = function(req, res){
  res.render('imagetext', { title: 'Image Text' });
};

//이미지 새로 가져오기 위해 플리커 API 호출하는 함수
exports.getImages = function(req, res){
  if(req.query.word) {
    word = req.query.word;
    console.log("Query Word:",word);
  }
  if(req.query.size) {
    size = req.query.size;
  }
  if(req.query.num) {
    picNum = req.query.num;
  }

  Flickr.authenticate(flickrOptions, function(error, flickr) {
    console.log("WORD:",word);
    console.log("size:",size);;
    console.log("picNum:",picNum);
    flickr.photos.search({
      text: word,
      page: 1,
      per_page: picNum
    }, function(err, images) {
      var results = {};
      results.word = word;
      results.image = images;
      results.size = size;
      results.text = textArray;

      res.send(results);
    });
  });
};

//이미지 새로 가져오기 위해 플리커 API 호출하는 함수
exports.getPage = function(req, res){
  if(req.query.word) {
    word = req.query.word;
  }else {
    word = 'flower';
  }
  size = word.length;
  picNum = size*30;
  textArray = makeTextArray(word);

  Flickr.authenticate(flickrOptions, function(error, flickr) {
    flickr.photos.search({
      text: word,
      page: 1,
      per_page: picNum
    }, function(err, images) {
      var results = {};
      results.word = word;
      results.image = images;
      results.size = size;
      results.text = textArray;
      console.log("WORD:",results.word);
      res.render('imagetext', results);
    });
  });
};

//서버에서 뿌려주는 데이터 변경해주는 함수
exports.makeData = function(data, callback){
  word = data.word;
  size = data.size;
  picNum = size * 30;
  textArray = makeTextArray(word);
  callback();
};

//Text를 알바벳 배열로. 알파벳 배열을 전체 합쳐진 배열로 만들어주는 함수
function makeTextArray(word) {
  var wordArray = [];
  var textArray = [];
  var textResult = [];  //결과 배열
  var size = word.length;

  for(var i=0; i<size; i++){
    var tmpCode = word[i].charCodeAt(0);
    //알파벳 대소문자 구분없이 0~25로 만들어주기 위해 65나 97을 빼줌
    if(tmpCode > 64 && tmpCode < 91){
      tmpCode = tmpCode-65;
    }
    else if(tmpCode > 96 && tmpCode < 123){
      tmpCode = tmpCode-97;
    }
    else{
      tmpCode = 26;
    }
    wordArray.push(tmpCode);
  }
  console.log("WORD:",wordArray);

  var chPtr;
  var chText;
  for(var i=0; i<size; i++) { //알파벳 문자 배열로 만들어줌
    chPtr = wordArray[i];
    chText = ch[chPtr];
    textArray.push(chText);
  }

  for(var i=0; i<10; i++) { //중간에 들어갈 문자열. 알파벳 문자를 이용해서 한줄씩 만들어줌
    textResult[i] = [];
    for(var j=0; j<size; j++) {
      textResult[i] = textResult[i].concat(textArray[j][i]);
    }
  }

  var cnt = size*7; //zeroArray에 들어갈 0의 개수
  var zeroArray = [];
  for(var i=0; i<cnt; i++) {
    zeroArray.push(0);
  }

  for(var i=0; i<5; i++) {  //위, 아래로 5줄씩 여백 추가
    textResult.unshift(zeroArray);
    textResult.push(zeroArray);
  }

  return textResult;
};